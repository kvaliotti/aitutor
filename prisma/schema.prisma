// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // AI Tutor relationships
  learningSessions LearningSession[]

  @@map("users")
}

model LearningSession {
  id             String   @id @default(cuid())
  userId         String
  threadId       String   @unique
  topic          String
  teachingStyle  String   @default("step-by-step") // socratic, step-by-step, discovery-based
  status         String   @default("active") // active, completed, paused
  completionRate Float    @default(0.00)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  concepts     Concept[]
  tasks        Task[]
  chatMessages ChatMessage[]

  @@map("learning_sessions")
}

model Concept {
  id                String    @id @default(cuid())
  sessionId         String
  name              String
  description       String?
  parentConceptId   String?
  orderIndex        Int
  isCompleted       Boolean   @default(false)
  completedAt       DateTime?
  createdAt         DateTime  @default(now())

  // Relationships
  session       LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  parentConcept Concept?        @relation("ConceptHierarchy", fields: [parentConceptId], references: [id])
  subConcepts   Concept[]       @relation("ConceptHierarchy")
  tasks         Task[]

  @@map("concepts")
}

model Task {
  id          String    @id @default(cuid())
  sessionId   String
  conceptId   String?
  title       String
  description String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  // Relationships
  session LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  concept Concept?        @relation(fields: [conceptId], references: [id], onDelete: SetNull)

  @@map("tasks")
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  role      String   // 'user' or 'assistant'
  content   String
  metadata  Json?    // For storing agent reasoning, concept updates, etc.
  createdAt DateTime @default(now())

  // Relationships
  session LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}
